version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bitatlas-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: bitatlas
      POSTGRES_USER: bitatlas
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d/
      - ./database/backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bitatlas -d bitatlas"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bitatlas-redis-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost
    volumes:
      - redis_data:/data
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runner
    container_name: bitatlas-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://bitatlas:${POSTGRES_PASSWORD}@postgres:5432/bitatlas
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      MASTER_KEY: ${MASTER_KEY}
      OAUTH_CLIENT_ID: ${OAUTH_CLIENT_ID}
      OAUTH_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
      STORAGE_PROVIDER: ${STORAGE_PROVIDER:-local}
      STORAGE_PATH: /app/uploads
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-52428800}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: json
      SSL_CERT_PATH: ${SSL_CERT_PATH}
      SSL_KEY_PATH: ${SSL_KEY_PATH}
    ports:
      - "127.0.0.1:3000:3000"  # Only bind to localhost (behind reverse proxy)
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/var/log/bitatlas
      - secrets_data:/app/secrets
      - ${SSL_CERT_PATH:-/dev/null}:${SSL_CERT_PATH:-/dev/null}:ro
      - ${SSL_KEY_PATH:-/dev/null}:${SSL_KEY_PATH:-/dev/null}:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend (Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      target: runner
    container_name: bitatlas-frontend-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:3001:80"  # Serve on port 80 internally
    environment:
      NODE_ENV: production
    volumes:
      - nginx_cache:/var/cache/nginx
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Reverse Proxy (nginx)
  nginx:
    image: nginx:1.25-alpine
    container_name: bitatlas-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl.conf:/etc/nginx/ssl.conf:ro
      - ${SSL_CERT_PATH:-/dev/null}:/etc/ssl/certs/bitatlas.crt:ro
      - ${SSL_KEY_PATH:-/dev/null}:/etc/ssl/private/bitatlas.key:ro
      - nginx_cache:/var/cache/nginx
      - logs_data:/var/log/nginx
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # Log Management (Optional)
  logrotate:
    image: alpine:3.18
    container_name: bitatlas-logrotate
    restart: unless-stopped
    volumes:
      - logs_data:/var/log/bitatlas
      - ./scripts/logrotate.conf:/etc/logrotate.conf:ro
    command: >
      sh -c "
        while true; do
          logrotate -f /etc/logrotate.conf
          sleep 86400
        done
      "

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/bitatlas/data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none  
      o: bind
      device: ${DATA_PATH:-/opt/bitatlas/data}/redis
  uploads_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/bitatlas/data}/uploads
  logs_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/bitatlas/data}/logs
  secrets_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/opt/bitatlas/data}/secrets
  nginx_cache:

networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: bitatlas-net